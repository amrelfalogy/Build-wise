{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DropdownDirective {\n  constructor(elRef) {\n    this.elRef = elRef;\n    this.isOpen = false;\n  }\n  toggleOpen(event) {\n    const isClickedInside = this.elRef.nativeElement.contains(event.target);\n    const isNavbarToggler = event.target.classList.contains('navbar-toggler');\n    // Toggle dropdown if clicked inside or navbar toggler button in responsive mode\n    if (isClickedInside || isNavbarToggler) {\n      this.isOpen = !this.isOpen;\n      const navbarCollapse = document.querySelector('.navbar-collapse');\n      if (navbarCollapse && navbarCollapse.classList.contains('show')) {\n        navbarCollapse.classList.remove('show');\n      }\n    } else {\n      // Close dropdown when clicking outside\n      this.isOpen = false;\n    }\n  }\n  static {\n    this.ɵfac = function DropdownDirective_Factory(t) {\n      return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: DropdownDirective,\n      selectors: [[\"\", \"appDropdown\", \"\"]],\n      hostVars: 2,\n      hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n            return ctx.toggleOpen($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"open\", ctx.isOpen);\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["DropdownDirective","constructor","elRef","isOpen","toggleOpen","event","isClickedInside","nativeElement","contains","target","isNavbarToggler","classList","navbarCollapse","document","querySelector","remove","i0","ɵɵdirectiveInject","ElementRef","selectors","hostVars","hostBindings","DropdownDirective_HostBindings","rf","ctx","$event","ɵɵresolveDocument"],"sources":["F:\\Projects\\Inchaat\\frontend\\src\\app\\dropdown.directive.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDropdown]',\r\n})\r\nexport class DropdownDirective {\r\n  @HostBinding('class.open') isOpen = false;\r\n\r\n  constructor(private elRef: ElementRef) {}\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  toggleOpen(event: Event) {\r\n    const isClickedInside = this.elRef.nativeElement.contains(event.target);\r\n    const isNavbarToggler = (event.target as HTMLElement).classList.contains(\r\n      'navbar-toggler'\r\n    );\r\n\r\n    // Toggle dropdown if clicked inside or navbar toggler button in responsive mode\r\n    if (isClickedInside || isNavbarToggler) {\r\n      this.isOpen = !this.isOpen;\r\n      const navbarCollapse = document.querySelector('.navbar-collapse');\r\n      if (navbarCollapse && navbarCollapse.classList.contains('show')) {\r\n        navbarCollapse.classList.remove('show');\r\n      }\r\n    } else {\r\n      // Close dropdown when clicking outside\r\n      this.isOpen = false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAUA,OAAM,MAAOA,iBAAiB;EAG5BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFE,KAAAC,MAAM,GAAG,KAAK;EAED;EAGxCC,UAAUA,CAACC,KAAY;IACrB,MAAMC,eAAe,GAAG,IAAI,CAACJ,KAAK,CAACK,aAAa,CAACC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAAC;IACvE,MAAMC,eAAe,GAAIL,KAAK,CAACI,MAAsB,CAACE,SAAS,CAACH,QAAQ,CACtE,gBAAgB,CACjB;IAED;IACA,IAAIF,eAAe,IAAII,eAAe,EAAE;MACtC,IAAI,CAACP,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;MAC1B,MAAMS,cAAc,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;MACjE,IAAIF,cAAc,IAAIA,cAAc,CAACD,SAAS,CAACH,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC/DI,cAAc,CAACD,SAAS,CAACI,MAAM,CAAC,MAAM,CAAC;;KAE1C,MAAM;MACL;MACA,IAAI,CAACZ,MAAM,GAAG,KAAK;;EAEvB;;;uBAvBWH,iBAAiB,EAAAgB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;IAAA;EAAA;;;YAAjBlB,iBAAiB;MAAAmB,SAAA;MAAAC,QAAA;MAAAC,YAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;mBAAjBC,GAAA,CAAApB,UAAA,CAAAqB,MAAA,CAAkB;UAAA,UAAAT,EAAA,CAAAU,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}